clear all; close all; clc;
restoredefaultpath
addpath('../matlab_tools');
addpath(genpath(pwd))

%% *** Experiment Setup ***************************************************

modelNames = [ ...
    {'CABLE.2.0'}
    {'CABLE_2.0_SLI.vxh599_r553'}
    {'CHTESSEL'}
    {'COLASSiB.2.0'}
    {'ISBA_SURFEX_3l.SURFEX7.3'}
    {'ISBA_SURFEX_dif.SURFEX7.3'}
    {'JULES.3.1'}
    {'JULES3.1_altP'}
    {'Mosaic.1'}
    {'NOAH.2.7.1'}
    {'Noah.3.2'}
    {'NOAH.3.3'}
    {'Manabe_Bucket.2 '}
    {'Penman_Monteith.1'}];

% site names
siteNames =  [{'Amplero'}
    {'Blodgett'}
    {'Bugac'}
    {'ElSaler2'}
    {'ElSaler'}
    {'Espirra'}
    {'FortPeck'}
    {'Harvard'}
    {'Hesse'}
    {'Howlandm'}
    {'Howard'}
    {'Hyytiala'}
    {'Kruger'}
    {'Loobos'}
    {'Merbleue'}
    {'Mopane'}
    {'Palang'}
    {'Sylvania'}
    {'Tumba'}
    {'UniMich'}];

% number of sites
Ns = length(siteNames);
Nm = length(modelNames);

% variable names
varNames = [{'Ws'},{'Ta'},{'Sw'},{'Lw'} ,{'Rh'},...
    {'PP'},{'Qe'},{'Qh'},{'NEE'},{'SM'}];%,{'SM2'}];
Du = 6; % number of forcing data
Dx = length(varNames);

% number of histogram bins
Nb = 50;

% lag length
lag = 1;

%% *** Perform Analysis ***************************************************

% init storage - model networks
Tm = zeros(Dx,Dx,Ns,Nm)./0;
Hm = zeros(Dx,Dx,Ns,Nm)./0;
Sm = zeros(Dx,Dx,Ns,Nm)./0;

% init storage - pals networks
Tp = zeros(Dx,Dx,Ns)./0;
Hp = zeros(Dx,Dx,Ns)./0;
Sp = zeros(Dx,Dx,Ns)./0;

% load data
for s = 1:Ns
    
    % screen report
    fprintf('Working on site %d of %d (%s) ...',s,Ns,siteNames{s});
    tsite = tic;
    
    % load model data
    fname = strcat('../data/model_data/extracted/',siteNames{s},'.mat');
    load(strcat(fname));
    Mdates = model(:,1:3,1); % date vector
    model(:,1:3,:) = [];     % remove dates
    model(:,end,:) = [];     % remove 2nd layer soil moisture
    model(model<-9990)=0./0; % grandmas
    assert(size(model,3) == Nm);
    assert(size(model,2) == Dx);
    
    % load pals data
    fname = strcat('../data/pals_data/extracted/',siteNames{s},'.txt');
    pals = load(strcat(fname));
    Pdates = pals(:,1:3); % date vector
    pals(:,1:3) = [];     % remove dates
    pals(:,end) = [];     % remove 2nd layer soil moisture
    pals(pals<-9990)=0/0; % grandmas
    assert(size(pals,2) == Dx);
    
    % find start and end dates of model data
    Ifm = find(~isnan(Mdates(:,1)),1,'first');
    Ilm = find(~isnan(Mdates(:,1)),1,'last');
    Mdates = Mdates(Ifm:Ilm,:);
    model = model(Ifm:Ilm,:,:);
    
    % find start and end dates of pals data
    Ifp = find(~isnan(Pdates(:,1)),1,'first'); assert(Ifm == Ifp);
    Ilp = find(~isnan(Pdates(:,1)),1,'last');  assert(Ilm == Ilp);
    Pdates = Pdates(Ifp:Ilp,:);
    pals = pals(Ifp:Ilp,:,:);
    
    % make sure the files have the same dates
    for d = 1:3
        assert(max(abs(Mdates(:,d)-Pdates(:,d)))==0);
    end
    dates = Pdates; clear Mdates Pdates
    
    % missing years at Espirra
    if s == 6
        dates(52609:end,:)   = [];
        pals( 52609:end,:)   = [];
        model(52609:end,:,:) = [];
    end
    
    %  soil indexes
    I = isnan(pals(:,Dx))';
    first = find([1,diff(I)]);
    runs = diff([first,length(I)+1]);
    [~,A] = sort(runs,'descend');
    soilstart = [];
    soilend = [];
    for a = 1:length(runs)
        if ~isnan(pals(first(A(a)),Dx))
            soilstart = first(A(a));
            soilend   = first(A(a)) + runs(A(a))-1;
            break
        end
    end
    assert(all(~isnan(pals(soilstart:soilend,Dx))));
    Nsoil = soilend-soilstart+1;
    
    if Nsoil > 17520
        dates = dates(soilstart:soilend,:);
        pals = pals(soilstart:soilend,:);
        model = model(soilstart:soilend,:,:);
    else
        Nsoil = 0;
        startsoil = [];
        endsoil = [];
        pals(:,Dx) = [];
        model(:,Dx,:) = [];
    end
    
    % deal with missing data
    for d = 1:size(pals,2)
        [pals(:,d),Nmissing] = grandma_smoothing(pals(:,d),0.001);
        if any(isnan(pals(:,d))); ...
                fprintf('bad pals vector from grandma smoothing: %s \n',...
                varNames{d});
        end
        for m = 1:Nm
            [model(:,d,m),~] = grandma_smoothing(model(:,d,m),0.001,0);
%             if any(isnan(model(:,d,m))); ...
%                     fprintf('bad %s vector from grandma smoothing: %s \n',...
%                     modelNames{m},varNames{d});
%             end
        end
    end
    
    % data dimensions
    assert(all(size(squeeze(model(:,:,1)))==size(pals)));
    assert(isempty(find(isnan(pals),1)));
    [Nt,Dp] = size(pals);
    
    % screen report
    fprintf('. Ndata = %d -- Nmissing = %d -- Nsoil = %d \n',Nt,Nmissing,Nsoil);
    
    % loop through dpn pathways
    for y = Du+1:Dp
        for x = 1:Dp
            
            % pull data
            Ys = pals(2:end,y);
            Yt = pals(1:end-1,y);
            if x <= Du
                Xt = pals(2:end,x);
            else
                Xtt = pals(1:end-1,x);
            end
            if x == y
                Yt = rand(size(Yt))*(max(Yt)-min(Yt)) + min(Yt);
            end
            
            % check grandma
            assert(isempty(find(isnan(Xt),1,'first')));
            assert(isempty(find(isnan(Yt),1,'first')));
            assert(isempty(find(isnan(Ys),1,'first')));
            
            % information bins
            Bmin = min([min(pals(:,y)),min(model(:,y))])-1e-6;
            Bmax = max([max(pals(:,y)),max(model(:,y))])+1e-6;
            By = linspace(Bmin,Bmax,Nb);
            Wy = By(2) - By(1);
            
            Bmin = min([min(pals(:,x)),min(model(:,x))])-1e-6;
            Bmax = max([max(pals(:,x)),max(model(:,x))])+1e-6;
            Bx = linspace(Bmin,Bmax,Nb);
            Wx = Bx(2) - Bx(1);
            
            % calculate pals network branch
            [Tp(x,y,s),Hp(x,y,s),~] = transfer_entropy(Ys,Xt,Yt,Wx,Wy);
            
            % perform on models
            for m = 1:Nm
                tmodel = tic;
                
                
                % pull data
                Ys = model(2:end,y,m);
                Yt = model(1:end-1,y,m);
                if x <= Du
                    Xt = model(2:end,x,m);
                else
                    Xtt = model(1:end-1,x,m);
                end
                if x == y
                    Yt = rand(size(Yt))*(max(Yt)-min(Yt)) + min(Yt);
                end
                
                % check grandma
                assert(isempty(find(isnan(Xt),1,'first')));
                assert(isempty(find(isnan(Yt),1,'first')));
                assert(isempty(find(isnan(Ys),1,'first')));
                
                % calculate
                [Tm(x,y,s,m),Hm(x,y,s,m),~] = transfer_entropy(Ys,Xt,Yt,Wx,Wy);
                
                % screen report
                t = toc(tmodel);
                fprintf(' ---- %s; %s -> %s; time = %f \n',...
                    modelNames{m},varNames{x},varNames{y},t);
                
            end % m-loop
        end % x-loop
    end % y-loop
    
    
    % screen report
    t = toc(tsite); fprintf('\n');
    fprintf('Finished Site %s - time = %f\n\n\n',siteNames{s},t);
    
    % save progress
    fname = strcat('results/main_dpn_results_',num2str(s),'.mat');
    save(fname);
    
end % s-loop

%% *** END PROGRAM ********************************************************



